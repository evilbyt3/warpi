# Kismet config file

# This master config file loads the other configuration files; to learn more about
# the Kismet configuration options, see the comments in the config files, and
# the documentation at:
# https://www.kismetwireless.net/docs/readme/config_files/
#
# You can edit the values in these files, but to make it much easier to update Kismet
# in the future, you should put your changes in the kismet_site.conf override file.
# You can learn more about the override config at:
# https://www.kismetwireless.net/docs/readme/config_files/#configuration-override-files---kismet_siteconf



# Include optional packaging config; this config file is optional and can be provided
# by the Kismet package; for example on OpenWRT this could restrict the memory use
# by default.
opt_override=%E/kismet_package.conf



# Include optional site-specific override configurations.  These options will
# are loaded AT THE END of config file loading, and OVERRIDE ANY OTHER OPTIONS
# OF THE SAME NAME.
#
# This file can be used to customize server installations or apply a common
# config across many Kismet installs.
opt_override=%E/kismet_site.conf


# Kismet can report basic server information in the status response, this
# can be used in some situations where you are running multiple Kismet
# instances.
#
# server_name=Kismet
# server_description=A Kismet server on a thing
# server_location=Main office


# Include the httpd config options
# %E is expanded to the system etc path configured at install
include=%E/kismet_httpd.conf

# Include the memory tuning options
include=%E/kismet_memory.conf

# Include the alert config options
include=%E/kismet_alerts.conf

# Include 802.11-specific options
include=%E/kismet_80211.conf

# Include logging options
include=%E/kismet_logging.conf

# Include filter options
include=%E/kismet_filter.conf

# Include UAV drone configs
include=%E/kismet_uav.conf


# Path that helper and capture binaries can be found in; for security, Kismet will
# only support binaries in these paths.  Multiple paths can be specified via multiple
# helper_binary_path options.
# By default, Kismet looks in the directory kismet installs into, controlled with
# the ./configure option --bindir
# Plugins may also look in their own directories if installed via usermode.
helper_binary_path=%B




# Kismet can announce itself via broadcast packets for automatic remote capture
# discovery; by default this is off; Check the Kismet README for more information
# and security concerns!
server_announce=false
server_announce_address=0.0.0.0
server_announce_port=2501




# Kismet can accept connections from remote capture datasources; by default this 
# is enabled on the loopback interface *only*.  It's recommended that the remote
# capture socket stay bound to the loopback local interface, and additional
# authentication - such as SSH tunnels - is used.  Check the Kismet README for
# more information about setting up remote capture securely!
remote_capture_listen=127.0.0.1
remote_capture_port=3501



# Datasource types can be masked from the probe and list subsystems; this is primarily
# for use on systems where loading some datasource types causes problems due to speed
# or memory, such as very small embedded systems.
# A masked datasource type will NOT be found automatically and will NOT be listed in
# the datasources window as an available source, however it MAY be specified with
# a type=xyz on the source line (such as source=rtladsb-0:type=rtldsb)
#
# mask_datasource_type=rtladsb
# mask_datasource_type=rtlamr




# See the README for more information how to define sources; sources take the
# form of:
# source=interface:options
#
# For example to capture from a Wi-Fi interface in Linux you could specify:
# source=wlan0
#
# or to specify a custom name,
# source=wlan0:name=ath9k
#
# Sources may be defined in the config file or on the command line via the 
# '-c' option.  Sources may also be defined live via the WebUI.
#
# Kismet does not pre-define any sources, permanent sources can be added here
# or in kismet_site.conf



# Default behavior of capture sources; if there are no options passed on the source
# definition to control hopping, hop rate, or other attributes, these are applied

# Hop channels if possible
channel_hop=true

# How fast do we hop channels?  Time can be hops/second or hops/minute.
channel_hop_speed=5/sec

# If we have multiple sources with the same type, Kismet can try to split
# them up so that they hop from different starting positions; this maximizes the
# coverage
split_source_hopping=true

# Should Kismet scramble the channel list so that it hops in a semi-random pattern?
# This helps sources like Wi-Fi where many channels are adjacent and can overlap, 
# by randomizing 2.4ghz channels Kismet can take advantage of the overlap.  Typically
# leave this turned on.
randomized_hopping=true

# Should sources be re-opened when they encounter an error?
retry_on_source_error=true


# When faced with extremely large numbers of sources, the host Kismet is running on 
# may have trouble reconfiguring the interfaces simultaneously; typically this shows up
# when 10-20 sources are enabled at once.  Kismet will break these sources into
# groups and configure them by group.

# Number of sources before we trigger staggered startup
source_stagger_threshold=16

# Number of sources to launch as each group
source_launch_group=8

# How long do we delay, in seconds, between opening groups of sources?
source_launch_delay=10

# Should we override remote sources timestamps?  If you do not have NTP coordinating
# the time between your remote capture devices, you may see unusual behavior if the
# system clocks are drastically different.
override_remote_timestamp=true


# GPS configuration
# gps=type:options
#
# Kismet supports multiple types of GPS.  Generally you should only activate one of these
# options at a time.
#
# Only one process can open a serial or USB device at the same time; if you are using GPSD,
# make sure not to configure Kismet on the same serial port.
#
# For more information about the GPS types, see the documentation at:
# https://www.kismetwireless.net/docs/readme/gps/
#
# gps=serial:device=/dev/ttyACM0,name=laptop
# gps=tcp:host=1.2.3.4,port=4352
 gps=gpsd:host=localhost,port=2947
# gps=virtual:lat=123.45,lon=45.678,alt=1234
# gps=web:name=gpsweb



# Do we process the contents of data frames?  If this is enabled, data
# frames will be truncated to the headers only immediately after frame type
# detection.  This will disable IP detection, etc, however it is likely
# safer (and definitely more polite) if monitoring networks you do not own.
# hidedata=true



# Do we allow plugins to be used?  This will load plugins from the system
# and user plugin directiories when set to true.
allowplugins=true



# OUI file, generated by tools/create_manuf_db.py
# Mapping of OUI to manufacturer data, generated from the IEEE database
ouifile=%S/kismet/kismet_manuf.txt.gz

# ICAO file, generated by tools/create_icao_db.py
# Mapping of ADSB ICAO registration numbers to flight data, generated from the FAA database
icaofile=%S/kismet/kismet_adsb_icao.txt.gz


# Known WEP keys to decrypt, bssid,hexkey.  This is only for networks where
# the keys are already known, and it may impact throughput on slower hardware.
# Multiple wepkey lines may be used for multiple BSSIDs.
# wepkey=00:DE:AD:C0:DE:00,FEEDFACEDEADBEEF01020304050607080900


# Is transmission of the keys to the client allowed?  This may be a security
# risk for some.  If you disable this, you will not be able to query keys from
# a client.
allowkeytransmit=true

# Where state info, etc, is stored.  You shouldn't ever need to change this.
# This is a directory.
configdir=%h/.kismet/


